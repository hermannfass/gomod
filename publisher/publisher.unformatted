package publisher

import(
   "fmt"
   "regexp"
   "net/http"
   "io"
   "io/ioutil"
)
       
func MakeUnixLineEnds(s string) string {
   // Unix: \n=LF=0x0A=\012=10  Mac: \r=CR=0x0D=\015=13  Dos: \r\n=CRLF 
   re := regexp.MustCompile("\r\n?")
   s = re.ReplaceAllString(s, "\n")
   return s
}

func splitAtTags(s, a, b string) map[string]string {
   r := make(map[string]string, 5)
   //              pre\/  start  \text  /   end   \post
   p := "(?sm)" + "(.*)(" + a + ")(.*)(" + b + ")(.*)"
   re, err := regexp.Compile(p)
   if (err != nil) {
      panic("Could not compile regexp: " + p)
   }
   m := re.FindStringSubmatch(s)
   r["pre"]   = m[1] + m[2]  // Before match including start tag
   r["tagged"] = m[3]
   r["post"]  = m[4] + m[5]  // After match prepended by end tag
   return(r)
}

func ReplaceTagged(o, a, b, n string) string {
   t := splitAtTags(o, "<!--in-->", "<!--out-->")
   r := t["pre"] + n + t["post"]
   return(r)
}

func ReadHttpBody(url string) string {
   resp, err := http.Get(url)
   if (err != nil) {
      panic(err)
   }
   defer resp.Body.Close()
   body, err := ioutil.ReadAll(resp.Body)
   if (err != nil) {
      panic(err)
   }
   return(string(body))
}

/* Write the top of an HTML page.
 * Because I WANT TO HARDCODE this (and it might become default markup).
 */
func WritePageTop(w io.Writer) {
   fmt.Fprintln(w,
      "<!DOCTYPE html>\n",
      "<html lang=\"de\">\n<head>\n<meta charset=\"utf-8\" />",
      "<title>Publisher</title>\n",
      "</head>\n<body>\n")
}
func WritePageBottom(w io.Writer) {
   fmt.Fprintln(w, "</body>\n</html>")
}

func defaultHandler(w http.ResponseWriter, r *http.Request) {
   fmt.Println("In defaultHandler")
   w.Header().Set("Content-Type", "text/html")
   WritePageTop(w)
   fmt.Fprintln(w,
      `<form action="/edit" method="get"><p>`,
      `<input type="text" name="p" value="http://www.astridgo.de/band.html" />`,
      `<input type="text" name="x" placeholder="vorname" autofocus />`,
      `<input type="submit" value="Seite aufrufen" />`,
      `</p></form>`)
   WritePageBottom(w)
}

func editHandler(w http.ResponseWriter, r *http.Request) {
   fmt.Println("In editHandler")
   x := r.URL.Query()["x"]
   fmt.Prinln("Presenting editable section ", x)
   w.Header().Set("Content-Type", "text/html")
   WritePageTop(w)
   fmt.Fprintln(w, "<p>Download page and present it here as form.</p>")
   WritePageBottom(w)

}

func StartWebServer() *http.Server {
   // Yes, I roll my own
   m := http.NewServeMux()
   m.HandleFunc("/", defaultHandler)
   m.HandleFunc("/edit", editHandler)
   s := &http.Server{Addr: ":8080", Handler: m,}
   go s.ListenAndServe()
   return(s)
}

